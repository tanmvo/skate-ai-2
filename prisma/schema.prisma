generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  // Auth.js relationships
  accounts Account[]
  sessions Session[]

  // Existing relationships
  studies      Study[]
  chats        Chat[]
  uploadBatches UploadBatch[]

  @@map(name: "users")
}

model Study {
  id            String      @id @default(cuid())
  name          String
  summary       String?     @db.Text // AI-generated summary of all documents
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  documents     Document[]
  chats         Chat[]
  messages      ChatMessage[]
  uploadBatches UploadBatch[]
}

model Document {
  id            String       @id @default(cuid())
  fileName      String
  fileType      String
  fileSize      Int
  status        ProcessingStatus @default(PROCESSING)
  extractedText String?      @db.Text
  uploadedAt    DateTime     @default(now())
  studyId       String
  study         Study        @relation(fields: [studyId], references: [id], onDelete: Cascade)
  chunks        DocumentChunk[]
  // File storage tracking
  storagePath   String?      // Full path to file on disk or blob storage
  storageUrl    String?      // Serving URL for the file
  storageType   String       @default("filesystem") // "filesystem" | "vercel-blob"
  // Batch upload tracking
  batchId       String?      // Reference to upload batch
  batch         UploadBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)

  @@index([batchId])
}

model DocumentChunk {
  id           String    @id @default(cuid())
  content      String    @db.Text
  chunkIndex   Int
  embedding    Bytes?    
  documentId   String
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Chat {
  id          String    @id @default(cuid())
  title       String    @default("New Chat")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  studyId     String
  study       Study     @relation(fields: [studyId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  messages    ChatMessage[]
}

model ChatMessage {
  id            String      @id @default(cuid())
  role          MessageRole
  content       String      @db.Text
  citations     Json?       
  toolCalls     Json?       // NEW: Persisted tool call execution data
  messageParts  Json?       // NEW: Complete AI SDK v5 message parts (optional backup)
  timestamp     DateTime    @default(now())
  chatId        String
  chat          Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  studyId       String      // Denormalized for easier queries
  study         Study       @relation(fields: [studyId], references: [id], onDelete: Cascade)
}

model UploadBatch {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyId         String
  study           Study        @relation(fields: [studyId], references: [id], onDelete: Cascade)
  status          BatchStatus  @default(VALIDATING)
  totalFiles      Int
  completedFiles  Int          @default(0)
  failedFiles     Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  metadata        Json?        // Store additional batch metadata
  documents       Document[]

  @@index([userId])
  @@index([studyId])
  @@index([status])
}

enum BatchStatus {
  VALIDATING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProcessingStatus {
  PROCESSING
  READY
  FAILED
}

enum MessageRole {
  USER
  ASSISTANT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}