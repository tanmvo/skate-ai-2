generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  studies       Study[]
  @@map(name: "users")
}

model Study {
  id          String      @id @default(cuid())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])
  documents   Document[]
  messages    ChatMessage[]
}

model Document {
  id            String       @id @default(cuid())
  fileName      String
  fileType      String
  fileSize      Int
  status        ProcessingStatus @default(PROCESSING)
  extractedText String?      @db.Text
  uploadedAt    DateTime     @default(now())
  studyId       String
  study         Study        @relation(fields: [studyId], references: [id], onDelete: Cascade)
  chunks        DocumentChunk[]
}

model DocumentChunk {
  id           String    @id @default(cuid())
  content      String    @db.Text
  chunkIndex   Int
  embedding    Bytes?    
  documentId   String
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id            String      @id @default(cuid())
  role          MessageRole
  content       String      @db.Text
  citations     Json?       
  timestamp     DateTime    @default(now())
  studyId       String
  study         Study       @relation(fields: [studyId], references: [id], onDelete: Cascade)
}

enum ProcessingStatus {
  PROCESSING
  READY
  FAILED
}

enum MessageRole {
  USER
  ASSISTANT
}